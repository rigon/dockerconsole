#!/bin/bash


help() {
	cmd=$1
	case "$cmd" in
		"bash")
			echo
			echo "Usage: bash [OPTIONS] [IMAGE]"
			echo
			echo "Run bash interactively in a new container"
			echo 
			echo "Options:"
			echo "  -c, --container container   Use container to run bash interactively"
			echo "  -l, --last                  Use the last container"
			;;
		"clean")
			echo
			echo "Usage: clean"
			echo
			echo "Remove all containers and images"
			;;
		"ll")
			echo
			echo "Usage: ll"
			echo
			echo "List all containers and all images"
			;;
		"")
			docker help | head -n -2
			echo
			echo "Additional commands from dockershell:"
			echo "  b           Shortcut for bash"
			echo "  bash        Run bash interactively in a new container"
			echo "  clean       Remove all containers and images"
			echo "  ll          List all containers and all images"
			echo "  h           Shortcut for help"
			echo "  hist        Shortcut for history"
			echo "  q           Shortcut for quit"
			echo "  quit        Exit this shell"
			echo
			echo "Run 'help COMMAND' for more information on a command."
			;;
		*)
			docker help ${@:1}
	esac
}


autocomplete_list() {
	# Commands without autocompletion
	list_commands="container image network node plugin secret service stack swarm system volume
         build cp create diff events exec export import info kill load login logout logs
         pause port pull rename restart rm rmi save search stats tag top unpause update version wait
         ll"
	echo $list_commands | tr " " "\n"
	
	# help
	for i in $list_commands bash ll; do echo "help $i"; done
	
	
	list_containers=$(docker ps -qa)
	list_images=$(docker images -qa && docker images -a | tail -n +2 | tr -s ' ' | cut -s -d ' ' -f 1,2 --output-delimiter=':')

	# attach
	for i in $list_containers; do echo "attach $i"; done
	# commit
	for i in $list_containers; do echo "commit $i"; done
	# start
	for i in $list_containers; do echo "start $i"; done
	# stop
	for i in $list_containers; do echo "stop $i"; done
	
	# history
	for i in $list_images; do echo "history $i"; done
	# inspect
	for i in $list_images; do echo "inspect $i"; done
	# run
	for i in $list_images; do echo "run $i"; done
	# push
	for i in $list_images; do echo "push $i"; done
	# bash
	echo "bash -l"
	echo "bash --last"
	for i in $list_images; do echo "bash $i"; done
	for i in $list_containers; do echo "bash -c $i"; echo "bash --container $i"; done

}

autocomplete_print() {
	list=$1
	cmd=$2
	options=$3
	
	case "$cmd" in
		"bash")
			# Nothing to do
			if [ "$options" == "-l" -o "$options" == "--last" ]; then return; fi
			
			# Select to list containers or images
			if [ "$options" == "-c" -o "$options" == "--container" ]; then
				docker_output=$(docker ps -a)
				options=$4	# The container ID is here
			else
				docker_output=$(docker images -a)
			fi
			
			echo "$docker_output" | head -n 1
			echo "$docker_output" | tail -n +2 | grep -- "$4"
			return;;
		"history" | "inspect" | "push" | "run")
			docker_output=$(docker images -a)
			echo "$docker_output" | head -n 1
			echo "$docker_output" | tail -n +2 | grep -- "${options}"
			return;;
		"attach" | "commit" | "start" | "stop")
			docker_output=$(docker ps -a)
			echo "$docker_output" | head -n 1
			echo "$docker_output" | tail -n +2 | grep -- "${options}"
			return;;
	esac
		
	echo "$list" | cut -d ' ' -f -1 | sort | uniq | column
}


autocomplete_tab() {
	echo "docker> ${READLINE_LINE}"
	
	# Filter the possibilities that doesn't match the prefix
	list=$(echo "$autocomplete_list" | grep -- "^${READLINE_LINE}")
	
	# Find longest prefix in the possibilities
	newautocomplete=$(echo "$list" | sed -e 'N;s/^\(.*\).*\n\1.*$/\1\n\1/;D')
	
	# If the remaining possibilities are none
	if [ "$newautocomplete" != "" ]; then
		READLINE_LINE="$newautocomplete"
		READLINE_POINT="${#READLINE_LINE}"
	fi
	
	# Print possible commands
	autocomplete_print "$list" $READLINE_LINE
}


bash_command() {
	# Check parameters
	if [ $# -lt 1 ]; then
		echo "You need to specify an image or an option!"
		return
	fi
	
	
	# Run bash in an existing container
	if [ $1 == "-l" -o $1 == "--last" -o $1 == "-c" -o $1 == "--container" ]; then
	
		if [ $1 == "-l" -o $1 == "--last" ]; then container=$(docker ps -lq); fi
		if [ $1 == "-c" -o $1 == "--container" ]; then container=$2; fi
	
		if [ "$container" == "" ]; then
			echo "Invalid container ID"
		else
			echo -n "Connecting to container "
			docker start $container
			docker exec -it $container /bin/bash
		fi
		return
	fi
	
	# Run bash in a new container
	docker run -it $options /bin/bash
}



echo "Type help for available commands and quit to exit the console"

# Read history
history -r ~/.dockershell_history

# Ignore Ctrl^C
trap ' ' SIGINT

# Key bind for TAB
set -o emacs;
bind -x '"\t":"autocomplete_tab"';


quit=0
while [ $quit -eq 0 ]; do

	# Create autocomplete list
	autocomplete_list=$(autocomplete_list)
	
	# Read command
	echo
	read -p "docker> " -r -e cmd
	quit=$?		# Get exit code to detect EOF
	
	# Custom commands and shotcuts
	action=$(echo "$cmd" | cut -d ' ' -f -1)
	options=$(echo "$cmd" | cut -s -d ' ' -f 2-)
	case $action in
		"");;
		"q" | "quit" | "exit")
			quit=1;;
		"h" | "help")
			help $options;;
		"b" | "bash")
			bash_command $options;;
		"clean")
			echo "CAUTION: THIS ACTION IS IRREVERSIBLE!!"
			echo "This will remove all containers and images!"
			read -r -p "Are you sure you want to continue (yes/no)? " cleanans
			if [ "$cleanans" == "yes" ]; then
				echo
				echo "-- Removing containers"
				for i in $(docker ps -aq); do docker stop $i; docker rm $i; done
				echo
				echo "-- Removing images"
				for i in $(docker images -aq); do docker rmi $i; done
			fi
			echo
			echo "-- Pruning volumes"
			docker volume prune
			;;
		"ll")
			docker images -a
			echo
			docker ps -a
			;;
		"hist")
			docker history $options;;
		*)
			docker $cmd
	esac

	# Save history and skip empty commands
	if [ "$cmd" != "" ]; then history -s "$cmd"; fi

done

# Write histiry
history -w ~/.dockershell_history
trap 2
echo
