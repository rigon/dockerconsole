#!/bin/bash


help() {
	cmd=$1
	case "$cmd" in
		"bash")
			echo
			echo "Usage: bash [OPTIONS] [IMAGE]"
			echo
			echo "Run bash interactively in a new container"
			echo 
			echo "Options:"
			echo "  -l  --last   Use the last container"
			;;
		"ll")
			echo
			echo "Usage: ll"
			echo
			echo "List all containers and all images"
			;;
		"")
			docker help | head -n -2
			echo
			echo "Additional commands from dockershell:"
			echo "  b           Shortcut for bash"
			echo "  bash        Run bash interactively in a new container"
			echo "  h           Shortcut for help"
			echo "  hist        Shortcut for history"
			echo "  q           Shortcut for quit"
			echo "  quit        Exit this shell"
			echo
			echo "Run 'help COMMAND' for more information on a command."
			;;
		*)
			docker help ${@:1}
	esac
}


autocomplete_list() {
	# Commands without autocompletion
	list_commands="container image network node plugin secret service stack swarm system volume
         build cp create diff events exec export import info inspect kill load login logout logs
         pause port rename restart rm rmi run save search stats tag top unpause update version wait
         ll"
	echo $list_commands | tr " " "\n"
	
	# help
	for i in $list_commands bash ll; do echo "help $i"; done
	
	
	list_containers=$(docker ps -qa)
	list_images=$(docker images -qa && docker images -a | tail -n +2 | tr -s ' ' | cut -s -d ' ' -f 1,2 --output-delimiter=':')

	# attach
	for i in $list_containers; do echo "attach $i"; done
	# commit
	for i in $list_containers; do echo "commit $i"; done
	# start
	for i in $list_containers; do echo "start $i"; done
	# stop
	for i in $list_containers; do echo "stop $i"; done
	
	# history
	for i in $list_images; do echo "history $i"; done
	# pull
	for i in $list_images; do echo "pull $i"; done
	# push
	for i in $list_images; do echo "push $i"; done
	# bash
	for i in $list_images --last; do echo "bash $i"; done

}

autocomplete_print() {
	cmd=$1
	options=$2
	
	case "$cmd" in
		"history" | "pull" | "push" | "bash")
			docker_output=$(docker images -a)
			echo "$docker_output" | head -n 1
			echo "$docker_output" | tail -n +2 | grep -- "${options}";;
		"attach" | "commit" | "start" | "stop")
			docker_output=$(docker ps -a)
			echo "$docker_output" | head -n 1
			echo "$docker_output" | tail -n +2 | grep -- "${options}";;
	esac
}


autocomplete_tab() {
	echo "docker> ${READLINE_LINE}"
	
	# Filter the possibilities that doesn't match the prefix
	list=$(echo "$autocomplete_list" | grep -- "^${READLINE_LINE}")
	
	# Find longest prefix in the possibilities
	newautocomplete=$(echo "$list" | sed -e 'N;s/^\(.*\).*\n\1.*$/\1\n\1/;D')
	
	# If the remaining possibilities are none
	if [ "$newautocomplete" != "" ]; then
		READLINE_LINE="$newautocomplete"
		READLINE_POINT="${#READLINE_LINE}"
	fi
	
	# Print possible commands
	list=$(echo "${list}" | cut -d ' ' -f -1 | sort | uniq)
	if [ $(echo "$list" | wc -l) -gt 1 ]; then
		echo "$list" | column
	else
		autocomplete_print $READLINE_LINE
	fi
}




echo "Type help for available commands and quit to exit the console"

# Read history
history -r ~/.dockershell_history

# Ignore Ctrl^C
trap ' ' SIGINT

# Key bind for TAB
set -o emacs;
bind -x '"\t":"autocomplete_tab"';


quit=0
while [ $quit -eq 0 ]; do

	# Create autocomplete list
	autocomplete_list=$(autocomplete_list)
	
	# Read command
	echo
	read -p "docker> " -r -e cmd
	quit=$?		# Get exit code to detect EOF
	
	# Custom commands and shotcuts
	action=$(echo "$cmd" | cut -d ' ' -f -1)
	options=$(echo "$cmd" | cut -s -d ' ' -f 2-)
	case $action in
		"");;
		"q" | "quit" | "exit")
			quit=1;;
		"h" | "help")
			help $options;;
		"b" | "bash")
			if [ ${#options} -lt 2 ]; then
				echo "You need to specify an image!"
			elif [ $options == "-l" -o $options == "--last" ]; then
				container=$(docker ps -lq)
				echo -n "Connecting to container "
				docker start $container
				docker exec -it $container /bin/bash
			else
				docker run -it $options /bin/bash
			fi
			;;
		"ll")
			docker images -a
			echo
			docker ps -a
			;;
		"hist")
			docker history $options;;
		*)
			docker $cmd
	esac

	# Save history and skip empty commands
	if [ "$cmd" != "" ]; then history -s "$cmd"; fi

done

# Write histiry
history -w ~/.dockershell_history
trap 2
echo
